pragme solidity >=0.5.16 <0.9.0;


contract RafikiCoin {


//State variables
mapping (address => uint) internal balances;
mapping (address => bool) public registered;
address public owner;


//Events
event LogRegistered(address accountAddress);
event LogDepositMade(address accountAddress, uint amount);
event LogWithdrawal(address accountAddress, uint withdrawAmount, uint newBalance);


function getBalance() public view returns (uint) {
  return balances[msg.sender];
}

function registerUser() public returns (bool){
  registered[msg.sender] = true;
  emit LogRegistered(msg.sender);
  return registered[msg.sender];
}

function deposit() public payable reutrns (uint) {
  registered[msg.sender] = true;
  balances[msg.sender] += msg. value;
  emit LogDepositMade(msg.sender, msg.value);
  return balances[msg.sender];
}

function withdraw(unit withdrawAmount) public returns (uint) {
  require (balances[msg.sender] >= withdrawAmount);
  balances[msg.sender] -= withdrawAmount;
  emit LogWithdrawal(msg.sender, withdrawAmount, balances[msg.sender]);
}

//fallback function
function () external payable {
  revert();
}

